// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tour_service.proto

package tour

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TourService_GetTour_FullMethodName                   = "/TourService/GetTour"
	TourService_GetAllTours_FullMethodName               = "/TourService/GetAllTours"
	TourService_PostTour_FullMethodName                  = "/TourService/PostTour"
	TourService_UpdateTour_FullMethodName                = "/TourService/UpdateTour"
	TourService_DeleteTour_FullMethodName                = "/TourService/DeleteTour"
	TourService_GetToursByAuthor_FullMethodName          = "/TourService/GetToursByAuthor"
	TourService_GetCheckpoint_FullMethodName             = "/TourService/GetCheckpoint"
	TourService_PostCheckpoint_FullMethodName            = "/TourService/PostCheckpoint"
	TourService_UpdateCheckpoint_FullMethodName          = "/TourService/UpdateCheckpoint"
	TourService_DeleteCheckpoint_FullMethodName          = "/TourService/DeleteCheckpoint"
	TourService_GetCheckpointsByTourId_FullMethodName    = "/TourService/GetCheckpointsByTourId"
	TourService_GetEquipment_FullMethodName              = "/TourService/GetEquipment"
	TourService_PostEquipment_FullMethodName             = "/TourService/PostEquipment"
	TourService_UpdateEquipment_FullMethodName           = "/TourService/UpdateEquipment"
	TourService_DeleteEquipment_FullMethodName           = "/TourService/DeleteEquipment"
	TourService_PostTourReview_FullMethodName            = "/TourService/PostTourReview"
	TourService_UpdateTourReview_FullMethodName          = "/TourService/UpdateTourReview"
	TourService_DeleteTourReview_FullMethodName          = "/TourService/DeleteTourReview"
	TourService_GetAllTourReviews_FullMethodName         = "/TourService/GetAllTourReviews"
	TourService_GetTourReviewsByTourID_FullMethodName    = "/TourService/GetTourReviewsByTourID"
	TourService_GetAverageGradeForTour_FullMethodName    = "/TourService/GetAverageGradeForTour"
	TourService_GetTourProblem_FullMethodName            = "/TourService/GetTourProblem"
	TourService_PostTourProblem_FullMethodName           = "/TourService/PostTourProblem"
	TourService_UpdateTourProblem_FullMethodName         = "/TourService/UpdateTourProblem"
	TourService_DeleteTourProblem_FullMethodName         = "/TourService/DeleteTourProblem"
	TourService_GetTourProblemsForTourist_FullMethodName = "/TourService/GetTourProblemsForTourist"
)

// TourServiceClient is the client API for TourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourServiceClient interface {
	GetTour(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TourResponse, error)
	GetAllTours(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetToursResponse, error)
	PostTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*TourResponse, error)
	UpdateTour(ctx context.Context, in *UpdateTourRequest, opts ...grpc.CallOption) (*TourResponse, error)
	DeleteTour(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TourResponse, error)
	GetToursByAuthor(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetToursResponse, error)
	GetCheckpoint(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CheckpointResponse, error)
	PostCheckpoint(ctx context.Context, in *CreateCheckpointRequest, opts ...grpc.CallOption) (*CheckpointResponse, error)
	UpdateCheckpoint(ctx context.Context, in *UpdateCheckpointRequest, opts ...grpc.CallOption) (*CheckpointResponse, error)
	DeleteCheckpoint(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CheckpointResponse, error)
	GetCheckpointsByTourId(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCheckpointsResponse, error)
	GetEquipment(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*EquipmentResponse, error)
	PostEquipment(ctx context.Context, in *CreateEquipmentRequest, opts ...grpc.CallOption) (*EquipmentResponse, error)
	UpdateEquipment(ctx context.Context, in *UpdateEquipmentRequest, opts ...grpc.CallOption) (*EquipmentResponse, error)
	DeleteEquipment(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*EquipmentResponse, error)
	PostTourReview(ctx context.Context, in *CreateTourReviewRequest, opts ...grpc.CallOption) (*TourReviewResponse, error)
	UpdateTourReview(ctx context.Context, in *UpdateTourReviewRequest, opts ...grpc.CallOption) (*TourReviewResponse, error)
	DeleteTourReview(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TourReviewResponse, error)
	GetAllTourReviews(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetTourReviewsResponse, error)
	GetTourReviewsByTourID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTourReviewsResponse, error)
	GetAverageGradeForTour(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetAverageGradeForTourRequest, error)
	GetTourProblem(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TourProblemResponse, error)
	PostTourProblem(ctx context.Context, in *CreateTourProblemRequest, opts ...grpc.CallOption) (*TourProblemResponse, error)
	UpdateTourProblem(ctx context.Context, in *UpdateTourProblemRequest, opts ...grpc.CallOption) (*TourProblemResponse, error)
	DeleteTourProblem(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TourProblemResponse, error)
	GetTourProblemsForTourist(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTourProblemsResponse, error)
}

type tourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourServiceClient(cc grpc.ClientConnInterface) TourServiceClient {
	return &tourServiceClient{cc}
}

func (c *tourServiceClient) GetTour(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, TourService_GetTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetAllTours(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetToursResponse, error) {
	out := new(GetToursResponse)
	err := c.cc.Invoke(ctx, TourService_GetAllTours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) PostTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, TourService_PostTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateTour(ctx context.Context, in *UpdateTourRequest, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, TourService_UpdateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) DeleteTour(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TourResponse, error) {
	out := new(TourResponse)
	err := c.cc.Invoke(ctx, TourService_DeleteTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetToursByAuthor(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetToursResponse, error) {
	out := new(GetToursResponse)
	err := c.cc.Invoke(ctx, TourService_GetToursByAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetCheckpoint(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CheckpointResponse, error) {
	out := new(CheckpointResponse)
	err := c.cc.Invoke(ctx, TourService_GetCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) PostCheckpoint(ctx context.Context, in *CreateCheckpointRequest, opts ...grpc.CallOption) (*CheckpointResponse, error) {
	out := new(CheckpointResponse)
	err := c.cc.Invoke(ctx, TourService_PostCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateCheckpoint(ctx context.Context, in *UpdateCheckpointRequest, opts ...grpc.CallOption) (*CheckpointResponse, error) {
	out := new(CheckpointResponse)
	err := c.cc.Invoke(ctx, TourService_UpdateCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) DeleteCheckpoint(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*CheckpointResponse, error) {
	out := new(CheckpointResponse)
	err := c.cc.Invoke(ctx, TourService_DeleteCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetCheckpointsByTourId(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetCheckpointsResponse, error) {
	out := new(GetCheckpointsResponse)
	err := c.cc.Invoke(ctx, TourService_GetCheckpointsByTourId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetEquipment(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*EquipmentResponse, error) {
	out := new(EquipmentResponse)
	err := c.cc.Invoke(ctx, TourService_GetEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) PostEquipment(ctx context.Context, in *CreateEquipmentRequest, opts ...grpc.CallOption) (*EquipmentResponse, error) {
	out := new(EquipmentResponse)
	err := c.cc.Invoke(ctx, TourService_PostEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateEquipment(ctx context.Context, in *UpdateEquipmentRequest, opts ...grpc.CallOption) (*EquipmentResponse, error) {
	out := new(EquipmentResponse)
	err := c.cc.Invoke(ctx, TourService_UpdateEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) DeleteEquipment(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*EquipmentResponse, error) {
	out := new(EquipmentResponse)
	err := c.cc.Invoke(ctx, TourService_DeleteEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) PostTourReview(ctx context.Context, in *CreateTourReviewRequest, opts ...grpc.CallOption) (*TourReviewResponse, error) {
	out := new(TourReviewResponse)
	err := c.cc.Invoke(ctx, TourService_PostTourReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateTourReview(ctx context.Context, in *UpdateTourReviewRequest, opts ...grpc.CallOption) (*TourReviewResponse, error) {
	out := new(TourReviewResponse)
	err := c.cc.Invoke(ctx, TourService_UpdateTourReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) DeleteTourReview(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TourReviewResponse, error) {
	out := new(TourReviewResponse)
	err := c.cc.Invoke(ctx, TourService_DeleteTourReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetAllTourReviews(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetTourReviewsResponse, error) {
	out := new(GetTourReviewsResponse)
	err := c.cc.Invoke(ctx, TourService_GetAllTourReviews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetTourReviewsByTourID(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTourReviewsResponse, error) {
	out := new(GetTourReviewsResponse)
	err := c.cc.Invoke(ctx, TourService_GetTourReviewsByTourID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetAverageGradeForTour(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetAverageGradeForTourRequest, error) {
	out := new(GetAverageGradeForTourRequest)
	err := c.cc.Invoke(ctx, TourService_GetAverageGradeForTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetTourProblem(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TourProblemResponse, error) {
	out := new(TourProblemResponse)
	err := c.cc.Invoke(ctx, TourService_GetTourProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) PostTourProblem(ctx context.Context, in *CreateTourProblemRequest, opts ...grpc.CallOption) (*TourProblemResponse, error) {
	out := new(TourProblemResponse)
	err := c.cc.Invoke(ctx, TourService_PostTourProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) UpdateTourProblem(ctx context.Context, in *UpdateTourProblemRequest, opts ...grpc.CallOption) (*TourProblemResponse, error) {
	out := new(TourProblemResponse)
	err := c.cc.Invoke(ctx, TourService_UpdateTourProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) DeleteTourProblem(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TourProblemResponse, error) {
	out := new(TourProblemResponse)
	err := c.cc.Invoke(ctx, TourService_DeleteTourProblem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetTourProblemsForTourist(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetTourProblemsResponse, error) {
	out := new(GetTourProblemsResponse)
	err := c.cc.Invoke(ctx, TourService_GetTourProblemsForTourist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourServiceServer is the server API for TourService service.
// All implementations must embed UnimplementedTourServiceServer
// for forward compatibility
type TourServiceServer interface {
	GetTour(context.Context, *GetRequest) (*TourResponse, error)
	GetAllTours(context.Context, *GetAllRequest) (*GetToursResponse, error)
	PostTour(context.Context, *CreateTourRequest) (*TourResponse, error)
	UpdateTour(context.Context, *UpdateTourRequest) (*TourResponse, error)
	DeleteTour(context.Context, *GetRequest) (*TourResponse, error)
	GetToursByAuthor(context.Context, *GetRequest) (*GetToursResponse, error)
	GetCheckpoint(context.Context, *GetRequest) (*CheckpointResponse, error)
	PostCheckpoint(context.Context, *CreateCheckpointRequest) (*CheckpointResponse, error)
	UpdateCheckpoint(context.Context, *UpdateCheckpointRequest) (*CheckpointResponse, error)
	DeleteCheckpoint(context.Context, *GetRequest) (*CheckpointResponse, error)
	GetCheckpointsByTourId(context.Context, *GetRequest) (*GetCheckpointsResponse, error)
	GetEquipment(context.Context, *GetRequest) (*EquipmentResponse, error)
	PostEquipment(context.Context, *CreateEquipmentRequest) (*EquipmentResponse, error)
	UpdateEquipment(context.Context, *UpdateEquipmentRequest) (*EquipmentResponse, error)
	DeleteEquipment(context.Context, *GetRequest) (*EquipmentResponse, error)
	PostTourReview(context.Context, *CreateTourReviewRequest) (*TourReviewResponse, error)
	UpdateTourReview(context.Context, *UpdateTourReviewRequest) (*TourReviewResponse, error)
	DeleteTourReview(context.Context, *GetRequest) (*TourReviewResponse, error)
	GetAllTourReviews(context.Context, *GetAllRequest) (*GetTourReviewsResponse, error)
	GetTourReviewsByTourID(context.Context, *GetRequest) (*GetTourReviewsResponse, error)
	GetAverageGradeForTour(context.Context, *GetRequest) (*GetAverageGradeForTourRequest, error)
	GetTourProblem(context.Context, *GetRequest) (*TourProblemResponse, error)
	PostTourProblem(context.Context, *CreateTourProblemRequest) (*TourProblemResponse, error)
	UpdateTourProblem(context.Context, *UpdateTourProblemRequest) (*TourProblemResponse, error)
	DeleteTourProblem(context.Context, *GetRequest) (*TourProblemResponse, error)
	GetTourProblemsForTourist(context.Context, *GetRequest) (*GetTourProblemsResponse, error)
	mustEmbedUnimplementedTourServiceServer()
}

// UnimplementedTourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTourServiceServer struct {
}

func (UnimplementedTourServiceServer) GetTour(context.Context, *GetRequest) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTour not implemented")
}
func (UnimplementedTourServiceServer) GetAllTours(context.Context, *GetAllRequest) (*GetToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTours not implemented")
}
func (UnimplementedTourServiceServer) PostTour(context.Context, *CreateTourRequest) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTour not implemented")
}
func (UnimplementedTourServiceServer) UpdateTour(context.Context, *UpdateTourRequest) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTour not implemented")
}
func (UnimplementedTourServiceServer) DeleteTour(context.Context, *GetRequest) (*TourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTour not implemented")
}
func (UnimplementedTourServiceServer) GetToursByAuthor(context.Context, *GetRequest) (*GetToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToursByAuthor not implemented")
}
func (UnimplementedTourServiceServer) GetCheckpoint(context.Context, *GetRequest) (*CheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpoint not implemented")
}
func (UnimplementedTourServiceServer) PostCheckpoint(context.Context, *CreateCheckpointRequest) (*CheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCheckpoint not implemented")
}
func (UnimplementedTourServiceServer) UpdateCheckpoint(context.Context, *UpdateCheckpointRequest) (*CheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCheckpoint not implemented")
}
func (UnimplementedTourServiceServer) DeleteCheckpoint(context.Context, *GetRequest) (*CheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheckpoint not implemented")
}
func (UnimplementedTourServiceServer) GetCheckpointsByTourId(context.Context, *GetRequest) (*GetCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointsByTourId not implemented")
}
func (UnimplementedTourServiceServer) GetEquipment(context.Context, *GetRequest) (*EquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipment not implemented")
}
func (UnimplementedTourServiceServer) PostEquipment(context.Context, *CreateEquipmentRequest) (*EquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostEquipment not implemented")
}
func (UnimplementedTourServiceServer) UpdateEquipment(context.Context, *UpdateEquipmentRequest) (*EquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEquipment not implemented")
}
func (UnimplementedTourServiceServer) DeleteEquipment(context.Context, *GetRequest) (*EquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEquipment not implemented")
}
func (UnimplementedTourServiceServer) PostTourReview(context.Context, *CreateTourReviewRequest) (*TourReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTourReview not implemented")
}
func (UnimplementedTourServiceServer) UpdateTourReview(context.Context, *UpdateTourReviewRequest) (*TourReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTourReview not implemented")
}
func (UnimplementedTourServiceServer) DeleteTourReview(context.Context, *GetRequest) (*TourReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourReview not implemented")
}
func (UnimplementedTourServiceServer) GetAllTourReviews(context.Context, *GetAllRequest) (*GetTourReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTourReviews not implemented")
}
func (UnimplementedTourServiceServer) GetTourReviewsByTourID(context.Context, *GetRequest) (*GetTourReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourReviewsByTourID not implemented")
}
func (UnimplementedTourServiceServer) GetAverageGradeForTour(context.Context, *GetRequest) (*GetAverageGradeForTourRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageGradeForTour not implemented")
}
func (UnimplementedTourServiceServer) GetTourProblem(context.Context, *GetRequest) (*TourProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourProblem not implemented")
}
func (UnimplementedTourServiceServer) PostTourProblem(context.Context, *CreateTourProblemRequest) (*TourProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTourProblem not implemented")
}
func (UnimplementedTourServiceServer) UpdateTourProblem(context.Context, *UpdateTourProblemRequest) (*TourProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTourProblem not implemented")
}
func (UnimplementedTourServiceServer) DeleteTourProblem(context.Context, *GetRequest) (*TourProblemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTourProblem not implemented")
}
func (UnimplementedTourServiceServer) GetTourProblemsForTourist(context.Context, *GetRequest) (*GetTourProblemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourProblemsForTourist not implemented")
}
func (UnimplementedTourServiceServer) mustEmbedUnimplementedTourServiceServer() {}

// UnsafeTourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourServiceServer will
// result in compilation errors.
type UnsafeTourServiceServer interface {
	mustEmbedUnimplementedTourServiceServer()
}

func RegisterTourServiceServer(s grpc.ServiceRegistrar, srv TourServiceServer) {
	s.RegisterService(&TourService_ServiceDesc, srv)
}

func _TourService_GetTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetTour(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetAllTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetAllTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetAllTours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetAllTours(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_PostTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).PostTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_PostTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).PostTour(ctx, req.(*CreateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateTour(ctx, req.(*UpdateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_DeleteTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).DeleteTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_DeleteTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).DeleteTour(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetToursByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetToursByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetToursByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetToursByAuthor(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetCheckpoint(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_PostCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).PostCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_PostCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).PostCheckpoint(ctx, req.(*CreateCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateCheckpoint(ctx, req.(*UpdateCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_DeleteCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).DeleteCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_DeleteCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).DeleteCheckpoint(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetCheckpointsByTourId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetCheckpointsByTourId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetCheckpointsByTourId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetCheckpointsByTourId(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetEquipment(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_PostEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).PostEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_PostEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).PostEquipment(ctx, req.(*CreateEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateEquipment(ctx, req.(*UpdateEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_DeleteEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).DeleteEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_DeleteEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).DeleteEquipment(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_PostTourReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).PostTourReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_PostTourReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).PostTourReview(ctx, req.(*CreateTourReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateTourReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTourReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateTourReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateTourReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateTourReview(ctx, req.(*UpdateTourReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_DeleteTourReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).DeleteTourReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_DeleteTourReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).DeleteTourReview(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetAllTourReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetAllTourReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetAllTourReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetAllTourReviews(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetTourReviewsByTourID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetTourReviewsByTourID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetTourReviewsByTourID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetTourReviewsByTourID(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetAverageGradeForTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetAverageGradeForTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetAverageGradeForTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetAverageGradeForTour(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetTourProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetTourProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetTourProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetTourProblem(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_PostTourProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).PostTourProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_PostTourProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).PostTourProblem(ctx, req.(*CreateTourProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_UpdateTourProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTourProblemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).UpdateTourProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_UpdateTourProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).UpdateTourProblem(ctx, req.(*UpdateTourProblemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_DeleteTourProblem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).DeleteTourProblem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_DeleteTourProblem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).DeleteTourProblem(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetTourProblemsForTourist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetTourProblemsForTourist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetTourProblemsForTourist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetTourProblemsForTourist(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TourService_ServiceDesc is the grpc.ServiceDesc for TourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TourService",
	HandlerType: (*TourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTour",
			Handler:    _TourService_GetTour_Handler,
		},
		{
			MethodName: "GetAllTours",
			Handler:    _TourService_GetAllTours_Handler,
		},
		{
			MethodName: "PostTour",
			Handler:    _TourService_PostTour_Handler,
		},
		{
			MethodName: "UpdateTour",
			Handler:    _TourService_UpdateTour_Handler,
		},
		{
			MethodName: "DeleteTour",
			Handler:    _TourService_DeleteTour_Handler,
		},
		{
			MethodName: "GetToursByAuthor",
			Handler:    _TourService_GetToursByAuthor_Handler,
		},
		{
			MethodName: "GetCheckpoint",
			Handler:    _TourService_GetCheckpoint_Handler,
		},
		{
			MethodName: "PostCheckpoint",
			Handler:    _TourService_PostCheckpoint_Handler,
		},
		{
			MethodName: "UpdateCheckpoint",
			Handler:    _TourService_UpdateCheckpoint_Handler,
		},
		{
			MethodName: "DeleteCheckpoint",
			Handler:    _TourService_DeleteCheckpoint_Handler,
		},
		{
			MethodName: "GetCheckpointsByTourId",
			Handler:    _TourService_GetCheckpointsByTourId_Handler,
		},
		{
			MethodName: "GetEquipment",
			Handler:    _TourService_GetEquipment_Handler,
		},
		{
			MethodName: "PostEquipment",
			Handler:    _TourService_PostEquipment_Handler,
		},
		{
			MethodName: "UpdateEquipment",
			Handler:    _TourService_UpdateEquipment_Handler,
		},
		{
			MethodName: "DeleteEquipment",
			Handler:    _TourService_DeleteEquipment_Handler,
		},
		{
			MethodName: "PostTourReview",
			Handler:    _TourService_PostTourReview_Handler,
		},
		{
			MethodName: "UpdateTourReview",
			Handler:    _TourService_UpdateTourReview_Handler,
		},
		{
			MethodName: "DeleteTourReview",
			Handler:    _TourService_DeleteTourReview_Handler,
		},
		{
			MethodName: "GetAllTourReviews",
			Handler:    _TourService_GetAllTourReviews_Handler,
		},
		{
			MethodName: "GetTourReviewsByTourID",
			Handler:    _TourService_GetTourReviewsByTourID_Handler,
		},
		{
			MethodName: "GetAverageGradeForTour",
			Handler:    _TourService_GetAverageGradeForTour_Handler,
		},
		{
			MethodName: "GetTourProblem",
			Handler:    _TourService_GetTourProblem_Handler,
		},
		{
			MethodName: "PostTourProblem",
			Handler:    _TourService_PostTourProblem_Handler,
		},
		{
			MethodName: "UpdateTourProblem",
			Handler:    _TourService_UpdateTourProblem_Handler,
		},
		{
			MethodName: "DeleteTourProblem",
			Handler:    _TourService_DeleteTourProblem_Handler,
		},
		{
			MethodName: "GetTourProblemsForTourist",
			Handler:    _TourService_GetTourProblemsForTourist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tour_service.proto",
}
