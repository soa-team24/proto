// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: follower-service.proto

package follower

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowService_AddFollow_FullMethodName                    = "/FollowService/AddFollow"
	FollowService_GetAllFollowersForUser_FullMethodName       = "/FollowService/GetAllFollowersForUser"
	FollowService_GetAllFollowersOfMyFollowers_FullMethodName = "/FollowService/GetAllFollowersOfMyFollowers"
	FollowService_GetAllProfiles_FullMethodName               = "/FollowService/GetAllProfiles"
	FollowService_CheckIfUserFollows_FullMethodName           = "/FollowService/CheckIfUserFollows"
)

// FollowServiceClient is the client API for FollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowServiceClient interface {
	AddFollow(ctx context.Context, in *AddFollowRequest, opts ...grpc.CallOption) (*AddFollowResponse, error)
	GetAllFollowersForUser(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error)
	GetAllFollowersOfMyFollowers(ctx context.Context, in *GetFollowersOfMyFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error)
	GetAllProfiles(ctx context.Context, in *GetAllProfilesRequest, opts ...grpc.CallOption) (*GetAllProfilesResponse, error)
	CheckIfUserFollows(ctx context.Context, in *CheckIfUserFollowsRequest, opts ...grpc.CallOption) (*CheckIfUserFollowsResponse, error)
}

type followServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowServiceClient(cc grpc.ClientConnInterface) FollowServiceClient {
	return &followServiceClient{cc}
}

func (c *followServiceClient) AddFollow(ctx context.Context, in *AddFollowRequest, opts ...grpc.CallOption) (*AddFollowResponse, error) {
	out := new(AddFollowResponse)
	err := c.cc.Invoke(ctx, FollowService_AddFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetAllFollowersForUser(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error) {
	out := new(GetFollowersResponse)
	err := c.cc.Invoke(ctx, FollowService_GetAllFollowersForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetAllFollowersOfMyFollowers(ctx context.Context, in *GetFollowersOfMyFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error) {
	out := new(GetFollowersResponse)
	err := c.cc.Invoke(ctx, FollowService_GetAllFollowersOfMyFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) GetAllProfiles(ctx context.Context, in *GetAllProfilesRequest, opts ...grpc.CallOption) (*GetAllProfilesResponse, error) {
	out := new(GetAllProfilesResponse)
	err := c.cc.Invoke(ctx, FollowService_GetAllProfiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followServiceClient) CheckIfUserFollows(ctx context.Context, in *CheckIfUserFollowsRequest, opts ...grpc.CallOption) (*CheckIfUserFollowsResponse, error) {
	out := new(CheckIfUserFollowsResponse)
	err := c.cc.Invoke(ctx, FollowService_CheckIfUserFollows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServiceServer is the server API for FollowService service.
// All implementations must embed UnimplementedFollowServiceServer
// for forward compatibility
type FollowServiceServer interface {
	AddFollow(context.Context, *AddFollowRequest) (*AddFollowResponse, error)
	GetAllFollowersForUser(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error)
	GetAllFollowersOfMyFollowers(context.Context, *GetFollowersOfMyFollowersRequest) (*GetFollowersResponse, error)
	GetAllProfiles(context.Context, *GetAllProfilesRequest) (*GetAllProfilesResponse, error)
	CheckIfUserFollows(context.Context, *CheckIfUserFollowsRequest) (*CheckIfUserFollowsResponse, error)
	mustEmbedUnimplementedFollowServiceServer()
}

// UnimplementedFollowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowServiceServer struct {
}

func (UnimplementedFollowServiceServer) AddFollow(context.Context, *AddFollowRequest) (*AddFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollow not implemented")
}
func (UnimplementedFollowServiceServer) GetAllFollowersForUser(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFollowersForUser not implemented")
}
func (UnimplementedFollowServiceServer) GetAllFollowersOfMyFollowers(context.Context, *GetFollowersOfMyFollowersRequest) (*GetFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFollowersOfMyFollowers not implemented")
}
func (UnimplementedFollowServiceServer) GetAllProfiles(context.Context, *GetAllProfilesRequest) (*GetAllProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProfiles not implemented")
}
func (UnimplementedFollowServiceServer) CheckIfUserFollows(context.Context, *CheckIfUserFollowsRequest) (*CheckIfUserFollowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserFollows not implemented")
}
func (UnimplementedFollowServiceServer) mustEmbedUnimplementedFollowServiceServer() {}

// UnsafeFollowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowServiceServer will
// result in compilation errors.
type UnsafeFollowServiceServer interface {
	mustEmbedUnimplementedFollowServiceServer()
}

func RegisterFollowServiceServer(s grpc.ServiceRegistrar, srv FollowServiceServer) {
	s.RegisterService(&FollowService_ServiceDesc, srv)
}

func _FollowService_AddFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).AddFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_AddFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).AddFollow(ctx, req.(*AddFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetAllFollowersForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetAllFollowersForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_GetAllFollowersForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetAllFollowersForUser(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetAllFollowersOfMyFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersOfMyFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetAllFollowersOfMyFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_GetAllFollowersOfMyFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetAllFollowersOfMyFollowers(ctx, req.(*GetFollowersOfMyFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_GetAllProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GetAllProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_GetAllProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GetAllProfiles(ctx, req.(*GetAllProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowService_CheckIfUserFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfUserFollowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).CheckIfUserFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_CheckIfUserFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).CheckIfUserFollows(ctx, req.(*CheckIfUserFollowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowService_ServiceDesc is the grpc.ServiceDesc for FollowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FollowService",
	HandlerType: (*FollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFollow",
			Handler:    _FollowService_AddFollow_Handler,
		},
		{
			MethodName: "GetAllFollowersForUser",
			Handler:    _FollowService_GetAllFollowersForUser_Handler,
		},
		{
			MethodName: "GetAllFollowersOfMyFollowers",
			Handler:    _FollowService_GetAllFollowersOfMyFollowers_Handler,
		},
		{
			MethodName: "GetAllProfiles",
			Handler:    _FollowService_GetAllProfiles_Handler,
		},
		{
			MethodName: "CheckIfUserFollows",
			Handler:    _FollowService_CheckIfUserFollows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follower-service.proto",
}
