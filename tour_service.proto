syntax = "proto3";

option go_package = "proto/tour";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service TourService {

  rpc GetTour(GetRequest) returns(TourResponse) {
   
  }

  
 rpc GetAllTours(GetAllRequest) returns(GetToursResponse) {
      
  }

  rpc PostTour(CreateTourRequest) returns(TourResponse) {
      
    }

  rpc UpdateTour(UpdateTourRequest) returns(TourResponse) {
     
  }

  rpc DeleteTour(GetRequest) returns(TourResponse) {
      
  }

  rpc GetToursByAuthor(GetRequest) returns(GetToursResponse) {
     
  }



  rpc GetCheckpoint(GetRequest) returns(CheckpointResponse) {
    
  }

  rpc PostCheckpoint(CreateCheckpointRequest) returns(CheckpointResponse) {
      
  }

  rpc UpdateCheckpoint(UpdateCheckpointRequest) returns(CheckpointResponse) {
     
  }


  rpc DeleteCheckpoint(GetRequest) returns(CheckpointResponse) {
      
  }

 rpc GetCheckpointsByTourId(GetRequest) returns(GetCheckpointsResponse) {
       
  }


  rpc GetEquipment(GetRequest) returns(EquipmentResponse) {
   
  }


  rpc PostEquipment(CreateEquipmentRequest) returns(EquipmentResponse) {
      
  }

  rpc UpdateEquipment(UpdateEquipmentRequest) returns(EquipmentResponse) {
     
  }

  rpc DeleteEquipment(GetRequest) returns(EquipmentResponse) {
      
  }



  rpc PostTourReview(CreateTourReviewRequest) returns(TourReviewResponse) {
      
  }

  rpc UpdateTourReview(UpdateTourReviewRequest) returns(TourReviewResponse) {
      
  }

  rpc DeleteTourReview(GetRequest) returns(TourReviewResponse) {
      
  }

  rpc GetAllTourReviews(GetAllRequest) returns(GetTourReviewsResponse) {
      
  }

  rpc GetTourReviewsByTourID(GetRequest) returns(GetTourReviewsResponse) {
      
  }

  rpc GetAverageGradeForTour(GetRequest) returns(GetAverageGradeForTourRequest) {
       
  }
  rpc GetTourProblem(GetRequest) returns(TourProblemResponse) {
      
    }


  rpc PostTourProblem(CreateTourProblemRequest) returns(TourProblemResponse) {
      
  }

  rpc UpdateTourProblem(UpdateTourProblemRequest) returns(TourProblemResponse) {
     
  }

  rpc DeleteTourProblem(GetRequest) returns(TourProblemResponse) {
      
  }

  rpc GetTourProblemsForTourist(GetRequest) returns(GetTourProblemsResponse) {
    
  }


}

message GetAllRequest {
}

message GetToursResponse {
  repeated Tour tours = 1;
}

message GetRequest {
  string id = 1;
}

message TourResponse {
  Tour tour = 1;
}
message TourEmptyResponse {
}

message CreateTourRequest {
  Tour tour = 1;
}

message UpdateTourRequest{
        string id = 1;
        Tour tour = 2;
}



message CheckpointResponse {
  Checkpoint checkpoint = 1;
}

message GetCheckpointsResponse {
  repeated Checkpoint checkpoints = 1;
}

message CreateCheckpointRequest {
  Checkpoint checkpoint = 1;
}

message UpdateCheckpointRequest{
        string id = 1;
        Checkpoint checkpoint = 2;
}


message EquipmentResponse {
  Equipment equipment = 1;
}

message GetEquipmentsResponse {
  repeated Equipment equipments = 1;
}

message CreateEquipmentRequest {
  Equipment equipment = 1;
}

message UpdateEquipmentRequest{
        string id = 1;
        Equipment equipment = 2;
}



message TourReviewResponse {
  TourReview tourReview = 1;
}

message GetTourReviewsResponse {
  repeated TourReview tourReviews = 1;
}

message CreateTourReviewRequest {
  TourReview tourReview = 1;
}

message UpdateTourReviewRequest{
        string id = 1;
        TourReview tourReview = 2;
}

message GetAverageGradeForTourRequest{
        float averageGrade = 1;
}



message TourProblemResponse {
  TourProblem tourProblem = 1;
}

message GetTourProblemsResponse {
  repeated TourProblem tourProblems = 1;
}

message CreateTourProblemRequest {
  TourProblem tourProblem = 1;
}

message UpdateTourProblemRequest{
        string id = 1;
        TourProblem tourProblem = 2;
}


message Tour {
    string id = 1;
    uint32 authorId = 2;
    string name = 3;
    string description = 4;
    string publishTime = 5;
    enum Status {
        Draft = 0;
        Published = 1;
        Archived = 2;
    };
    Status status = 6;
    string image = 7;
    uint32 difficulty = 8;
    float price = 9;
    float footTime = 10;
    float bicycleTime = 11;
    float carTime = 12;
    float totalLength = 13;
}

message Checkpoint {
    string id = 1;
    string tourId = 2;
    float latitude = 3;
    float longitude = 4;
    string name = 5;
    string description = 6;
    string image = 7;
    bool isPublic = 8;
  
}

message Equipment {
    string id = 1;
    string name = 2;
    string description = 3;
  
}

message TourReview {
    string id = 1;
    uint32 grade = 2;
    string comment = 3;
    uint32 userId = 4;
    google.protobuf.Timestamp visitDate = 5;
    google.protobuf.Timestamp reviewDate = 6;
    string images = 7;
    string tourId = 8;
  
}

message TourProblem {
  string id = 1;
  string problemCategory = 2;
  string problemPriority = 3;
  google.protobuf.Timestamp timeStamp = 4;
  string description = 5;
  string tourId = 6;
  bool isClosed = 7;
  bool isResolved = 8;
  uint32 touristId = 9;
  google.protobuf.Timestamp deadlineTimeStamp = 10;
}

